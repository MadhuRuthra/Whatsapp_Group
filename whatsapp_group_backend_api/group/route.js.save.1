const express = require("express");
const router = express.Router();

const { Client, LocalAuth, Buttons, MessageMedia, Location, List } = require('whatsapp-web.js');
const fse = require('fs-extra');
const fs = require('fs');
const env = process.env
const moment = require("moment")

const chrome_path = env.GOOGLE_CHROME;
const waiting_time = env.WAITING_TIME;

const CreateCsv = require("./create_csv");

const validator = require('../../validation/middleware')
const valid_user = require("../../validation/valid_user_middleware_with_request");
const CreateGroupValidation = require("../../validation/create_group_validation");
const CreateCsvValidation = require("../../validation/create_csv_validation");
const SendMessageValidation = require("../../validation/send_message_validation");
const main = require('../../logger')
const db = require("../../db_connect/connect");

router.post(
    "/create_csv",
    validator.body(CreateCsvValidation),
    valid_user,
    async function (req, res, next) {
        try {
            var logger = main.logger
            var logger_all = main.logger_all

            var result = await CreateCsv.create_csv(req);
            result['request_id'] = req.body.request_id;

            var update_api_log = "";
            if (result.response_code == 0) {
                update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = '${result.response_msg}' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
            }
            else {
                update_api_log = `UPDATE api_log SET response_status = 'S',response_date = CURRENT_TIMESTAMP, response_comments = 'Success' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
            }

            logger_all.info("[update query request] : " + update_api_log);
            const update_api_log_result = await db.query(update_api_log);
            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

            logger.info("[API RESPONSE] " + JSON.stringify(result))
            logger_all.info("[API RESPONSE] " + JSON.stringify(result))
            res.json(result);

        } catch (err) {
            console.error(`Error while getting data`, err.message);
            next(err);
        }
    }
);


router.post(
    "/send_message",
    //validator.body(SendMessageValidation),
    //valid_user,
    async function (req, res, next) {
        try {
            var logger = main.logger
            var logger_all = main.logger_all

            var myGroupName = req.body.group_name;
            var sender_id = req.body.sender_numbers;
            var template_name = req.body.template_name;
            var message_content = req.body.message;
            var function_call = false;
            var user_id = req.body.user_id;
            var sender_master_id;
            var grp_id = 0;
            var response_json;

            logger.info(" [send_msg query parameters] : " + JSON.stringify(req.body));

            const get_plan = `SELECT * FROM plans_update where plan_status = 'Y' and user_id = '${user_id}' and plan_expiry_date > CURRENT_TIMESTAMP`;
            logger_all.info("[Select query request] : " + get_plan);
            const get_plan_result = await db.query(get_plan);
            logger_all.info("[Select query response] : " + JSON.stringify(get_plan_result))

            if (get_plan_result.length == 0) {
                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Validity period is expired.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                logger_all.info("[update query request] : " + update_api_log);
                const update_api_log_result = await db.query(update_api_log);
                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Validity period is expired.' }
                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                return res.json(response_json)
            } 

            const select_sender_id = `SELECT * FROM senderid_master WHERE mobile_no = '${sender_id}' AND senderid_master_status = 'Y'`
            logger_all.info(" [select query request] : " + select_sender_id)
            const select_sender_id_status = await db.query(select_sender_id);
            logger_all.info(" [select query response] : " + JSON.stringify(select_sender_id_status))

            if (select_sender_id_status.length == 0) {

                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                logger_all.info("[update query request] : " + update_api_log);
                const update_api_log_result = await db.query(update_api_log);
                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID not found.' }
                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                return res.json(response_json)
            }
            else {

                user_id = select_sender_id_status[0].user_id;
                sender_master_id = select_sender_id_status[0].sender_master_id;
                

                const select_grp = `SELECT * FROM group_master WHERE sender_master_id = '${sender_master_id}' AND group_name = '${myGroupName}' AND group_master_status = 'Y'`
                logger_all.info("[select query request] : " + select_grp)
                const select_grp_result = await db.query(select_grp);
                logger_all.info("[select query response] : " + JSON.stringify(select_grp_result))


                const select_template = `SELECT * FROM template_master WHERE template_name = '${template_name}' AND template_status = 'Y'`
                logger_all.info("[select query request] : " + select_template)
                const select_template_result = await db.query(select_template);
                logger_all.info("[select query response] : " + JSON.stringify(select_template_result))

                template_message  = select_template_result[0].template_message;
                template_master_id = select_template_result[0].template_master_id;


                if (select_grp_result.length != 0) {
                    grp_id = select_grp_result[0].group_master_id;
                }

                Date.prototype.julianDate = function () {
                    var j = parseInt((this.getTime() - new Date('Dec 30,' + (this.getFullYear() - 1) + ' 23:00:00').getTime()) / 86400000).toString(),
                        i = 3 - j.length;
                    while (i-- > 0) j = 0 + j;
                    return j
                };

                var client = new Client({
                    restartOnAuthFail: true,
                    takeoverOnConflict: true,
                    takeoverTimeoutMs: 0,
                    puppeteer: {
                        handleSIGINT: false,
                        args: [
                            '--no-sandbox',
                           '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-accelerated-2d-canvas',
                           '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu'
                        ],
                        executablePath: chrome_path,
                    },
                    authStrategy: new LocalAuth(
                        { clientId: sender_id }
                    )
                }
                );

                client.initialize();

                client.on('ready', async (data) => {
                    logger_all.info('Client is ready! - ' + sender_id);
                    send_message();
                });

                setTimeout(async function () {
                    if (function_call == false) {
                        // await client.destroy();

                        // logger_all.info('destroy number - ' + sender_id)

                        logger_all.info(' rescan number - ' + sender_id)
                        if (fs.existsSync(`./.wwebjs_auth/session-${sender_id}`)) {
                            fs.rmdirSync(`./.wwebjs_auth/session-${sender_id}`, { recursive: true })

                        }
                        if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                            try {
                                if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                                fse.copySync(`./session_copy/session-${sender_id}`, `./.wwebjs_auth/session-${sender_id}`, { overwrite: true | false })
                                logger_all.info('Folder copied successfully')
                                }

                                client = new Client({
                                    restartOnAuthFail: true,
                                    takeoverOnConflict: true,
                                    takeoverTimeoutMs: 0,
                                    puppeteer: {
                                        handleSIGINT: false,
                                        args: [
                                            '--no-sandbox',
                                            '--disable-setuid-sandbox',
                                            '--disable-dev-shm-usage',
                                            '--disable-accelerated-2d-canvas',
                                            '--no-first-run',
                                            '--no-zygote',
                                            '--disable-gpu'
                                        ],
                                        executablePath: chrome_path,
                                    },
                                    authStrategy: new LocalAuth(
                                        { clientId: sender_id }
                                    )
                                }
                                );

                                client.initialize();

                                client.on('authenticated', async (data) => {
                                    logger_all.info(" [Client is Log in] : " + JSON.stringify(data));

                                });

                                client.on('ready', async (data) => {
                                    logger_all.info(" [Client is ready] : " + client.options.authStrategy.clientId);
                                    send_message()
                                });

                                setTimeout(async function () {
                                    if (function_call == false) {

                                        const update_inactive = `UPDATE senderid_master SET senderid_master_status = 'X' WHERE mobile_no = '${sender_id}' AND senderid_master_status != 'D'`
                                        logger_all.info(" [update query request] : " + update_inactive)
                                        const update_inactive_result = await db.query(update_inactive);
                                        logger_all.info(" [update query response] : " + JSON.stringify(update_inactive_result))

                                        const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID unlinked' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                        logger_all.info("[update query request] : " + update_api_log);
                                        const update_api_log_result = await db.query(update_api_log);
                                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                        response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID unlinked.', }
                                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                        return res.json(response_json)
                                    }
                                }, waiting_time);
                            } catch (err) {
                                logger_all.info(err)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }
                        }
                        else {
                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    }
                }, waiting_time);

                async function send_message() {

                    function_call = true;

                    const select_campaign_id = `SELECT * FROM whatsapp_group_newapi_${user_id}.compose_message_${user_id} ORDER BY compose_message_id DESC limit 1`
                    logger_all.info("[select query request] : " + select_campaign_id)
                    const select_campaign_id_result = await db.query(select_campaign_id);
                    logger_all.info("[select query response] : " + JSON.stringify(select_campaign_id_result))

                    if (select_campaign_id_result.length == 0) {
                        campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_1`;
                    }
                    else {

                        let temp_var = select_campaign_id_result[0].campaign_name.split("_");
                        logger_all.info(temp_var[temp_var.length - 1]);
                        let unique_id = parseInt(temp_var[temp_var.length - 1])
                        campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_${unique_id + 1}`;
                    }

                   // client.getChats().then(async (chats) => {
                        //try {

                            //const myGroup = chats.find((chat) => chat.name === myGroupName);

try {

   // Wait for the client to be ready
        //await new Promise(resolve => setTimeout(resolve, 5000));
  logger_all.info(" Group name - " + myGroupName)



    const chats = await client.getChats();
    const myGroup = chats.find(chat => chat.isGroup && chat.name.toLowerCase() === myGroupName.toLowerCase());
//chats.find((chat) => chat.name === myGroupName);

                            if (!myGroup) {
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)

                                const update_group = `UPDATE group_master SET group_master_status = 'D' WHERE group_name = '${myGroupName}' AND group_master_status = 'Y'`
                                logger_all.info("[update query request] : " + update_group);
                                const update_group_result = await db.query(update_group);
                                logger_all.info("[update query response] : " + JSON.stringify(update_group_result))

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Group not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Group not found' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)

                            }

                            if (grp_id == 0) {

                                const insert_grp = `INSERT INTO group_master VALUES(NULL,'${user_id}','${sender_master_id}','${myGroupName}','${myGroup.participants.length}','0','${myGroup.participants.length}','N','Y',CURRENT_TIMESTAMP)`
                                logger_all.info("[insert query request] : " + insert_grp);
                                const insert_grp_result = await db.query(insert_grp);
                                logger_all.info("[insert query response] : " + JSON.stringify(insert_grp_result))

                                grp_id = insert_grp_result.insertId;
                            }

                            const insert_msg = `INSERT INTO whatsapp_group_newapi_${user_id}.compose_message_${user_id} VALUES(NULL,'${user_id}','${sender_master_id}','${grp_id}',${template_master_id},'TEXT','${campaign_name}','N',CURRENT_TIMESTAMP)`
                            logger_all.info("[insert query request] : " + insert_msg);
                            const insert_msg_result = await db.query(insert_msg);
                            logger_all.info("[insert query response] : " + JSON.stringify(insert_msg_result))

                            const insert_msg_content = `INSERT INTO whatsapp_group_newapi_${user_id}.compose_msg_media_${user_id} VALUES(NULL,'${insert_msg_result.insertId}','${message}',NULL,NULL,NULL,NULL,NULL,NULL,'N',CURRENT_TIMESTAMP)`
                            logger_all.info("[insert query request] : " + insert_msg_content);
                            const insert_msg_content_result = await db.query(insert_msg_content);
                            logger_all.info("[insert query response] : " + JSON.stringify(insert_msg_content_result))

                            let res_status = 'F'
                            let res_msg = 'Error occurred'
                            let res_code = 201
                            let res_code_status = 0

                            try {
 logger_all.info('message:', message_content);
                       logger_all.info('Group ID:', myGroup.id._serialized);
 logger_all.info('Message :', message_content);
                       const message_response = await myGroup.sendMessage(message_content);
                         logger_all.info('Message sent successfully:', JSON.stringify(message_response));
                              //  logger_all.info(myGroup.id._serialized);
                                //var group_add = await client.sendMessage(`${myGroupName}`, message);

                                //logger_all.info(JSON.stringify(group_add));
                                res_status = 'Y'
                                res_msg = 'Success'
                                res_code = 200
                                res_code_status = 1
                            }
                            catch (e) {
                                logger_all.info(" Send message error - " + e)
                            }
                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)

                            const update_msg = `UPDATE whatsapp_group_${user_id}.compose_message_${user_id} SET cm_status = '${res_status}' WHERE compose_message_id = '${insert_msg_result.insertId}' AND cm_status = 'N'`
                            logger_all.info("[update query request] : " + update_msg);
                            const update_msg_result = await db.query(update_msg);
                            logger_all.info("[update query response] : " + JSON.stringify(update_msg_result))

                            const update_msg_content = `UPDATE whatsapp_group_${user_id}.compose_msg_media_${user_id} SET cmm_status = '${res_status}' WHERE compose_msg_media_id = '${insert_msg_content_result.insertId}' AND cmm_status = 'N'`
                            logger_all.info("[update query request] : " + update_msg_content);
                            const update_msg_content_result = await db.query(update_msg_content);
                            logger_all.info("[update query response] : " + JSON.stringify(update_msg_content_result))

                            const update_api_log = `UPDATE api_log SET response_status = '${res_status}',response_date = CURRENT_TIMESTAMP, response_comments = '${res_msg}' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: res_code_status, response_status: res_code, response_msg: res_msg }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                        catch (e) {
                            logger_all.info(e);

                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)

                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_Result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_Result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    //})
                }
            }

        } catch (err) {
            console.error(`Error while getting data`, err.message);
            next(err);
        }
    }
);


router.post(
    "/add_members",
    validator.body(CreateGroupValidation),
    valid_user,
    async function (req, res, next) {
        try {
            var logger = main.logger
            var logger_all = main.logger_all

            var myGroupName = req.body.group_name;
            var participants = req.body.participants;
            var participants_number = [];
            var sender_id = req.body.sender_id;
            var function_call = false;
            var contact_id = [];
            var response_msg = [];
            var user_id = req.body.user_id;
            var sender_master_id;
            var grp_id = 0;
            var campaign_name;
            var response_json;

            const select_sender_id = `SELECT * FROM senderid_master WHERE mobile_no = '${sender_id}' AND senderid_master_status = 'Y'`
            logger_all.info(" [select query request] : " + select_sender_id)
            const select_sender_id_status = await db.query(select_sender_id);
            logger_all.info(" [select query response] : " + JSON.stringify(select_sender_id_status))

            if (select_sender_id_status.length == 0) {

                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                logger_all.info("[update query request] : " + update_api_log);
                const update_api_log_result = await db.query(update_api_log);
                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID not found.' }
                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                return res.json(response_json)
            }
            else {

                user_id = select_sender_id_status[0].user_id;
                sender_master_id = select_sender_id_status[0].sender_master_id;

                const select_grp = `SELECT * FROM group_master WHERE sender_master_id = '${sender_master_id}' AND group_name = '${myGroupName}' AND group_master_status = 'Y'`
                logger_all.info("[select query request] : " + select_grp)
                const select_grp_result = await db.query(select_grp);
                logger_all.info("[select query response] : " + JSON.stringify(select_grp_result))

                // if (select_grp_result.length == 0) {
                //     const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Group not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                //     logger_all.info("[update query request] : " + update_api_log);
                //     const update_api_log_result = await db.query(update_api_log);
                //     logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                //     response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Group not found' }
                //     logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                //     logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                //     return res.json(response_json)

                // }

                if (select_grp_result.length != 0) {
                    grp_id = select_grp_result[0].group_master_id;
                }

                Date.prototype.julianDate = function () {
                    var j = parseInt((this.getTime() - new Date('Dec 30,' + (this.getFullYear() - 1) + ' 23:00:00').getTime()) / 86400000).toString(),
                        i = 3 - j.length;
                    while (i-- > 0) j = 0 + j;
                    return j
                };

                const select_campaign_id = `SELECT * FROM group_contacts ORDER BY group_contacts_id DESC limit 1`
                logger_all.info("[select query request] : " + select_campaign_id)
                const select_campaign_id_result = await db.query(select_campaign_id);
                logger_all.info("[select query response] : " + JSON.stringify(select_campaign_id_result))

                if (select_campaign_id_result.length == 0) {
                    campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_1`;
                }
                else {

                    let temp_var = select_campaign_id_result[0].campaign_name.split("_");
                    logger_all.info(temp_var[temp_var.length - 1]);
                    let unique_id = parseInt(temp_var[temp_var.length - 1])
                    campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_${unique_id + 1}`;
                }

                var client = new Client({
                    restartOnAuthFail: true,
                    takeoverOnConflict: true,
                    takeoverTimeoutMs: 0,
                    puppeteer: {
                        handleSIGINT: false,
                        args: [
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-accelerated-2d-canvas',
                            '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu'
                        ],
                        executablePath: chrome_path,
                    },
                    authStrategy: new LocalAuth(
                        { clientId: sender_id }
                    )
                }
                );

                client.initialize();

                client.on('ready', async (data) => {
                    logger_all.info('Client is ready! - ' + sender_id);
                    add_participant();
                });

                setTimeout(async function () {
                    if (function_call == false) {
                        // await client.destroy();

                        // logger_all.info('destroy number - ' + sender_id)

                        logger_all.info(' rescan number - ' + sender_id)
                        if (fs.existsSync(`./.wwebjs_auth/session-${sender_id}`)) {
                            fs.rmdirSync(`./.wwebjs_auth/session-${sender_id}`, { recursive: true })

                        }
                        if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                            try {
                                //if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                                fse.copySync(`./session_copy/session-${sender_id}`, `./.wwebjs_auth/session-${sender_id}`, { overwrite: true | false })
                                logger_all.info('Folder copied successfully')
                                //}

                                client = new Client({
                                    restartOnAuthFail: true,
                                    takeoverOnConflict: true,
                                    takeoverTimeoutMs: 0,
                                    puppeteer: {
                                        handleSIGINT: false,
                                        args: [
                                            '--no-sandbox',
                                            '--disable-setuid-sandbox',
                                            '--disable-dev-shm-usage',
                                            '--disable-accelerated-2d-canvas',
                                            '--no-first-run',
                                            '--no-zygote',
                                            '--disable-gpu'
                                        ],
                                        executablePath: chrome_path,
                                    },
                                    authStrategy: new LocalAuth(
                                        { clientId: sender_id }
                                    )
                                }
                                );

                                client.initialize();

                                client.on('authenticated', async (data) => {
                                    logger_all.info(" [Client is Log in] : " + JSON.stringify(data));

                                });

                                client.on('ready', async (data) => {
                                    logger_all.info(" [Client is ready] : " + client.options.authStrategy.clientId);
                                    add_participant()
                                });

                                setTimeout(async function () {
                                    if (function_call == false) {

                                        const update_inactive = `UPDATE senderid_master SET senderid_master_status = 'X' WHERE mobile_no = '${sender_id}' AND senderid_master_status != 'D'`
                                        logger_all.info(" [update query request] : " + update_inactive)
                                        const update_inactive_result = await db.query(update_inactive);
                                        logger_all.info(" [update query response] : " + JSON.stringify(update_inactive_result))

                                        const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID unlinked' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                        logger_all.info("[update query request] : " + update_api_log);
                                        const update_api_log_result = await db.query(update_api_log);
                                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                        response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID unlinked.', }
                                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                        return res.json(response_json)
                                    }
                                }, waiting_time);
                            } catch (err) {
                                logger_all.info(err)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }
                        }
                        else {
                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    }
                }, waiting_time);

                async function add_participant() {
                    function_call = true;

                    client.getChats().then(async (chats) => {
                        try {

                            const myGroup = chats.find((chat) => chat.name === myGroupName);

                            const parti_count = myGroup.participants.length;
                            logger_all.info(JSON.stringify(myGroup));
                            if (!myGroup) {
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)

                                const update_group = `UPDATE group_master SET group_master_status = 'D' WHERE group_name = '${myGroupName}' AND group_master_status = 'Y'`
                                logger_all.info("[update query request] : " + update_group);
                                const update_group_result = await db.query(update_group);
                                logger_all.info("[update query response] : " + JSON.stringify(update_group_result))

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Group not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Group not found' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)

                            }
                            else if (parti_count > 1000) {
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Cannot add more than 1000 numbers to a group.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Cannot add more than 1000 numbers to a group.' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }

                            await client.getContacts().then(async (contacts) => {
                                for (var i = 0; i < participants.length; i++) {
                                    // logger_all.info(JSON.stringify(contacts))

                                    const select_number = `SELECT con.campaign_name
                                    FROM group_contacts con 
                                    LEFT JOIN group_master grp ON grp.group_master_id = con.group_master_id
                                    WHERE con.mobile_no = '${participants[i]}' AND grp.group_name = '${myGroupName}' AND con.group_contacts_status = 'Y'`
                                    logger_all.info("[select query request] : " + select_number);
                                    const select_number_result = await db.query(select_number);
                                    logger_all.info("[select query response] : " + JSON.stringify(select_number_result))

                                    if (select_number_result.length == 0) {
                                        logger_all.info(" - " + participants[i])
                                        const contactToAdd = contacts.find(
                                            (contact) => contact.number === `${participants[i]}`
                                        );

                                        if (contactToAdd) {

                                            logger_all.info("Contact Found!!!");

                                            const sanitized_number = participants[i].toString().replace(/[- )(]/g, ""); // remove unnecessary chars from the number
                                            const final_number = `${sanitized_number.substring(sanitized_number.length - 10)}`; // add 91 before the number here 91 is country code of India

                                            const number_details = await client.getNumberId(final_number); // get mobile number details

                                            if (number_details) {
                                                contact_id.push(contactToAdd.id._serialized);
                                                participants_number.push(participants[i]);
                                                response_msg.push("Success");
                                            }
                                            else {
                                                logger_all.info('Not in whatsapp!!!');
                                                response_msg.push("Mobile number not in whatsapp");
                                            }
                                        } else {
                                            logger_all.info('Not found!!!');
                                            response_msg.push("Contact not found");
                                        }
                                    }
                                    else {
                                        response_msg.push("Mobile number already in the group");
                                    }
                                }
                            });
                            // }

                            if (contact_id.length == 0) {

                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'No contacts found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'No contacts found.' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }

                            var group_add = await myGroup.addParticipants(contact_id);
                            logger_all.info(group_add);

                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)

                            if (grp_id == 0) {

                                const insert_grp = `INSERT INTO group_master VALUES(NULL,'${user_id}','${sender_master_id}','${myGroupName}','${participants.length}','${contact_id.length}','${participants.length - contact_id.length}','N','Y',CURRENT_TIMESTAMP)`
                                logger_all.info("[insert query request] : " + insert_grp);
                                const insert_grp_result = await db.query(insert_grp);
                                logger_all.info("[insert query response] : " + JSON.stringify(insert_grp_result))

                                grp_id = insert_grp_result.insertId;
                            }

                            else {
                                const update_grp_count = `UPDATE group_master SET total_count = total_count+${participants.length},success_count= success_count+${contact_id.length}, failure_count= failure_count+${participants.length - contact_id.length} WHERE group_master_id = '${grp_id}' AND group_master_status = 'Y'`
                                logger_all.info("[update query request] : " + update_grp_count);
                                const update_grp_count_result = await db.query(update_grp_count);
                                logger_all.info("[update query response] : " + JSON.stringify(update_grp_count_result))
                            }

                            for (var k = 0; k < participants.length; k++) {
                                var contact_status = participants_number.includes(`${participants[k]}`) ? 'Y' : 'F';

                                const update_number_status = `INSERT INTO group_contacts VALUES(NULL,'${user_id}','${grp_id}','${campaign_name}','${participants[k]}','${participants[k]}','${response_msg[k]}','${contact_status}',CURRENT_TIMESTAMP,NULL)`
                                logger_all.info("[insert query request] : " + update_number_status);
                                const update_number_status_result = await db.query(update_number_status);
                                logger_all.info("[insert query response] : " + JSON.stringify(update_number_status_result))

                            }

                            const update_api_log = `UPDATE api_log SET response_status = 'S',response_date = CURRENT_TIMESTAMP, response_comments = 'Success' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 1, response_status: 200, response_msg: 'Success.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                        catch (e) {
                            logger_all.info(e);

                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)

                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_Result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_Result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    })
                }
            }

        } catch (err) {
            console.error(`Error while getting data`, err.message);
            next(err);
        }
    }
);

router.post(
    "/create_group",
    validator.body(CreateGroupValidation),
    valid_user,
    async function (req, res, next) {
        try {

            var logger = main.logger
            var logger_all = main.logger_all

            var myGroupName = req.body.group_name;
            var participants = req.body.participants;
            var participants_number = [];
            var sender_id = req.body.sender_id;
            var campaign_name = req.body.campaign_name;
            var response_msg = [];

            var function_call = false;
            var contact_id = [];
            var user_id = req.body.user_id;
            var sender_master_id;
            var response_json;

            var available_group_count = 0;
            // var one_month_before_day = moment(new Date()).subtract(30, 'days').format("YYYY-MM-DD HH:mm:ss");

            const select_sender = `SELECT * FROM senderid_master WHERE mobile_no = '${sender_id}' AND senderid_master_status = 'Y'`;
            logger_all.info(" [select query request] : " + select_sender)
            const select_sender_result = await db.query(select_sender);
            logger_all.info(" [select query response] : " + JSON.stringify(select_sender_result))

            if (select_sender_result.length == 0) {

                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                logger_all.info("[update query request] : " + update_api_log);
                const update_api_log_result = await db.query(update_api_log);
                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID not found.' }
                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                return res.json(response_json)
            }
            else {
                sender_master_id = select_sender_result[0].sender_master_id;

                const get_plan = `SELECT * FROM plans_update where plan_status = 'Y' and user_id = '${user_id}' and plan_expiry_date > CURRENT_TIMESTAMP`;
                logger_all.info("[Select query request] : " + get_plan);
                logger_all.info("[Select query request] : " + get_plan);
                const get_plan_result = await db.query(get_plan);
                logger_all.info("[Select query response] : " + JSON.stringify(get_plan_result))

                if (get_plan_result.length > 0) {
                    available_group_count = get_plan_result[0].available_group_count;
                }

                if (available_group_count <= 0) {

                    const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'No available credit to create group.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                    logger_all.info("[update query request] : " + update_api_log);
                    const update_api_log_result = await db.query(update_api_log);
                    logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                    response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'No available credit to create group.' }
                    logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                    logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                    return res.json(response_json)
                } else if(get_plan_result.length == 0) {
                    const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Validity period is expired.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                    logger_all.info("[update query request] : " + update_api_log);
                    const update_api_log_result = await db.query(update_api_log);
                    logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                    response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Validity period is expired.' }
                    logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                    logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                    return res.json(response_json)
                }

                const select_grp_result = `SELECT * FROM group_master WHERE sender_master_id = '${sender_master_id}' AND group_name = '${myGroupName}' AND group_master_status = 'Y'`
                logger_all.info("[select query request] : " + select_grp_result)
                const select_grp_result_result = await db.query(select_grp_result);
                logger_all.info("[select query response] : " + JSON.stringify(select_grp_result_result))

                if (select_grp_result_result.length != 0) {
                    const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Group already exists' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                    logger_all.info("[update query request] : " + update_api_log);
                    const update_api_log_result = await db.query(update_api_log);
                    logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                    response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Group already exists' }
                    logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                    logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                    return res.json(response_json)

                }

                if (participants.length > 1000) {
                    const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Cannot add more than 1000 numbers to a group.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                    logger_all.info("[update query request] : " + update_api_log);
                    const update_api_log_result = await db.query(update_api_log);
                    logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                    response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Cannot add more than 1000 numbers to a group.' }
                    logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                    logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                    return res.json(response_json)
                }
                Date.prototype.julianDate = function () {
                    var j = parseInt((this.getTime() - new Date('Dec 30,' + (this.getFullYear() - 1) + ' 23:00:00').getTime()) / 86400000).toString(),
                        i = 3 - j.length;
                    while (i-- > 0) j = 0 + j;
                    return j
                };

                const select_campaign_id = `SELECT * FROM group_contacts ORDER BY group_contacts_id DESC limit 1`
                logger_all.info("[select query request] : " + select_campaign_id)
                const select_campaign_id_result = await db.query(select_campaign_id);
                logger_all.info("[select query response] : " + JSON.stringify(select_campaign_id_result))

                if (select_campaign_id_result.length == 0) {
                    campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_1`;
                }
                else {
                    let temp_var = select_campaign_id_result[0].campaign_name.split("_");
                    let unique_id = parseInt(temp_var[temp_var.length - 1])
                    campaign_name = `ca_${myGroupName}_${new Date().julianDate()}_${unique_id + 1}`;
                }
                var client = new Client({
                    restartOnAuthFail: true,
                    takeoverOnConflict: true,
                    takeoverTimeoutMs: 0,
                    puppeteer: {
                        handleSIGINT: false,
                        args: [
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-accelerated-2d-canvas',
                            '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu'
                        ],
                        executablePath: chrome_path,
                    },
                    authStrategy: new LocalAuth(
                        { clientId: sender_id }
                    )
                }
                );

                client.initialize();

                client.on('ready', async (data) => {
                    logger_all.info('Client is ready! - ' + sender_id);
                    create_grp();
                });

                setTimeout(async function () {
                    if (function_call == false) {

                        logger_all.info(' rescan number - ' + sender_id)
                        if (fs.existsSync(`./.wwebjs_auth/session-${sender_id}`)) {
                            fs.rmdirSync(`./.wwebjs_auth/session-${sender_id}`, { recursive: true })
                        }
                        if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                            try {
                                //if (fs.existsSync(`./session_copy/session-${sender_id}`)) { 
                                fse.copySync(`./session_copy/session-${sender_id}`, `./.wwebjs_auth/session-${sender_id}`, { overwrite: true | false })
                                logger_all.info('Folder copied successfully')
                                //}

                                client = new Client({
                                    restartOnAuthFail: true,
                                    takeoverOnConflict: true,
                                    takeoverTimeoutMs: 0,
                                    puppeteer: {
                                        handleSIGINT: false,
                                        args: [
                                            '--no-sandbox',
                                            '--disable-setuid-sandbox',
                                            '--disable-dev-shm-usage',
                                            '--disable-accelerated-2d-canvas',
                                            '--no-first-run',
                                            '--no-zygote',
                                            '--disable-gpu'
                                        ],
                                        executablePath: chrome_path,
                                    },
                                    authStrategy: new LocalAuth(
                                        { clientId: sender_id }
                                    )
                                }
                                );

                                client.initialize();

                                client.on('authenticated', async (data) => {
                                    logger_all.info(" [Client is Log in] : " + JSON.stringify(data));

                                });

                                client.on('ready', async (data) => {
                                    logger_all.info(" [Client is ready] : " + client.options.authStrategy.clientId);
                                    create_grp()
                                });

                                setTimeout(async function () {
                                    if (function_call == false) {

                                        const update_inactive = `UPDATE senderid_master SET senderid_master_status = 'X' WHERE mobile_no = '${sender_id}' AND senderid_master_status != 'D'`
                                        logger_all.info(" [update query request] : " + update_inactive)
                                        const update_inactive_result = await db.query(update_inactive);
                                        logger_all.info(" [update query response] : " + JSON.stringify(update_inactive_result))

                                        const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID unlinked' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                        logger_all.info("[update query request] : " + update_api_log);
                                        const update_api_log_result = await db.query(update_api_log);
                                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                        response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID unlinked.', }
                                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                        return res.json(response_json)
                                    }
                                }, waiting_time);
                            } catch (err) {
                                logger_all.info(err)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }
                        }
                        else {

                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    }
                }, waiting_time);

                async function create_grp() {
                    function_call = true;

                    try {

                        await client.getContacts().then(async (contacts) => {
                            logger_all.info(JSON.stringify(contacts))
                            for (var i = 0; i < participants.length; i++) {

                                logger_all.info(" - " + participants[i])
                                const contactToAdd = contacts.find(
                                    (contact) => contact.number === `${participants[i]}`
                                );

                                if (contactToAdd) {

                                    logger_all.info("Contact Found!!!");

                                    const sanitized_number = participants[i].toString().replace(/[- )(]/g, ""); // remove unnecessary chars from the number
                                    const final_number = `${sanitized_number.substring(sanitized_number.length - 10)}`; // add 91 before the number here 91 is country code of India

                                    const number_details = await client.getNumberId(final_number); // get mobile number details

                                    if (number_details) {
                                        contact_id.push(contactToAdd.id._serialized);
                                        participants_number.push(participants[i]);
                                        response_msg.push("Success")
                                    }
                                    else {
                                        logger_all.info('Not in whatsapp!!!');
                                        response_msg.push("Mobile number not in whatsapp")
                                    }

                                } else {
                                    logger_all.info('Not found!!!');
                                    response_msg.push("Contact not found")
                                }
                            }
                        });
                        // }

                        if (contact_id.length == 0) {

                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)

                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'No contacts found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'No contacts found.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }

                        var create_grp = await client.createGroup(myGroupName, contact_id)
                        logger_all.info(create_grp);

                        await client.destroy();
                        logger_all.info(" Destroy client - " + sender_id)

                        const insert_grp = `INSERT INTO group_master VALUES(NULL,'${user_id}','${sender_master_id}','${myGroupName}','${participants.length}','${contact_id.length}','${participants.length - contact_id.length}','Y','Y',CURRENT_TIMESTAMP)`
                        logger_all.info("[insert query request] : " + insert_grp);
                        const insert_grp_result = await db.query(insert_grp);
                        logger_all.info("[insert query response] : " + JSON.stringify(insert_grp_result))

                        for (var k = 0; k < participants.length; k++) {

                            var contact_status = participants_number.includes(`${participants[k]}`) ? 'Y' : 'F';

                            const update_number_status = `INSERT INTO group_contacts VALUES(NULL,'${user_id}','${insert_grp_result.insertId}','${campaign_name}','${participants[k]}','${participants[k]}','${response_msg[k]}','${contact_status}',CURRENT_TIMESTAMP,NULL)`
                            logger_all.info("[insert query request] : " + update_number_status);
                            const update_number_status_result = await db.query(update_number_status);
                            logger_all.info("[insert query response] : " + JSON.stringify(update_number_status_result))

                        }

                        const update_api_log = `UPDATE api_log SET response_status = 'S',response_date = CURRENT_TIMESTAMP, response_comments = 'Success' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                        logger_all.info("[update query request] : " + update_api_log);
                        const update_api_log_result = await db.query(update_api_log);
                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))
                          // Update plans_update table
                       const plans_update =` UPDATE plans_update SET available_group_count = available_group_count - 1,used_group_count = used_group_count + 1 WHERE user_id = '${user_id}' AND plan_status = 'Y'`;

                        logger_all.info("[update query request] : " + plans_update);
                        const plans_update_result = await db.query(plans_update);
                        logger_all.info("[update query response] : " + JSON.stringify(plans_update_result))

                        response_json = { request_id: req.body.request_id, response_code: 1, response_status: 200, response_msg: 'Success.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                        return res.json(response_json)
                    }
                    catch (e) {
                        logger_all.info(e);
                        await client.destroy();
                        logger_all.info(" Destroy client - " + sender_id)
                        const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                        logger_all.info("[update query request] : " + update_api_log);
                        const update_api_log_result = await db.query(update_api_log);
                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                        response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                        return res.json(response_json)
                    }
                }
            }
        } catch (err) {
            console.error(`Error while getting data`, err.message);
            next(err);
        }
    }
);


router.post(
    "/remove_members",
    // validator.body(CreateGroupValidation),
    valid_user,
    async function (req, res, next) {
        try {
            var logger = main.logger
            var logger_all = main.logger_all

            var myGroupName = req.body.group_name;
            var participants = req.body.participants;
            var group_contacts_ids = req.body.group_contacts_ids;
            var participants_number = [];
            var sender_id = req.body.sender_id;
            var remove_comments = req.body.remove_comments;
            var function_call = false;
            var contact_id = [];
            var response_msg = [];
            var user_id = req.body.user_id;
            var sender_master_id;
            var grp_id = 0;
            var campaign_name;
            var response_json;

            const select_sender_id = `SELECT * FROM senderid_master WHERE mobile_no = '${sender_id}' AND senderid_master_status = 'Y'`
            logger_all.info(" [select query request] : " + select_sender_id)
            const select_sender_id_status = await db.query(select_sender_id);
            logger_all.info(" [select query response] : " + JSON.stringify(select_sender_id_status))

            if (select_sender_id_status.length == 0) {

                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                logger_all.info("[update query request] : " + update_api_log);
                const update_api_log_result = await db.query(update_api_log);
                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID not found.' }
                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                return res.json(response_json)
            }
            else {

                user_id = select_sender_id_status[0].user_id;
                sender_master_id = select_sender_id_status[0].sender_master_id;

                const select_grp = `SELECT * FROM group_master WHERE sender_master_id = '${sender_master_id}' AND group_name = '${myGroupName}' AND group_master_status = 'Y'`
                logger_all.info("[select query request] : " + select_grp)
                const select_grp_result = await db.query(select_grp);
                logger_all.info("[select query response] : " + JSON.stringify(select_grp_result))

                if (select_grp_result.length != 0) {
                    grp_id = select_grp_result[0].group_master_id;
                }

                const select_campaign_id = `SELECT * FROM group_contacts ORDER BY group_contacts_id DESC limit 1`
                logger_all.info("[select query request] : " + select_campaign_id)
                const select_campaign_id_result = await db.query(select_campaign_id);
                logger_all.info("[select query response] : " + JSON.stringify(select_campaign_id_result))


                var client = new Client({
                    restartOnAuthFail: true,
                    takeoverOnConflict: true,
                    takeoverTimeoutMs: 0,
                    puppeteer: {
                        handleSIGINT: false,
                        args: [
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-accelerated-2d-canvas',
                            '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu'
                        ],
                        executablePath: chrome_path,
                    },
                    authStrategy: new LocalAuth(
                        { clientId: sender_id }
                    )
                }
                );

                client.initialize();

                client.on('ready', async (data) => {
                    logger_all.info('Client is ready! - ' + sender_id);
                    remove_participant();
                });

                setTimeout(async function () {
                    if (function_call == false) {
                        // await client.destroy();

                        // logger_all.info('destroy number - ' + sender_id)

                        logger_all.info(' rescan number - ' + sender_id)
                        if (fs.existsSync(`./.wwebjs_auth/session-${sender_id}`)) {
                            fs.rmdirSync(`./.wwebjs_auth/session-${sender_id}`, { recursive: true })

                        }
                        if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                            try {
                                //if (fs.existsSync(`./session_copy/session-${sender_id}`)) {
                                fse.copySync(`./session_copy/session-${sender_id}`, `./.wwebjs_auth/session-${sender_id}`, { overwrite: true | false })
                                logger_all.info('Folder copied successfully')
                                //}

                                client = new Client({
                                    restartOnAuthFail: true,
                                    takeoverOnConflict: true,
                                    takeoverTimeoutMs: 0,
                                    puppeteer: {
                                        handleSIGINT: false,
                                        args: [
                                            '--no-sandbox',
                                            '--disable-setuid-sandbox',
                                            '--disable-dev-shm-usage',
                                            '--disable-accelerated-2d-canvas',
                                            '--no-first-run',
                                            '--no-zygote',
                                            '--disable-gpu'
                                        ],
                                        executablePath: chrome_path,
                                    },
                                    authStrategy: new LocalAuth(
                                        { clientId: sender_id }
                                    )
                                }
                                );

                                client.initialize();

                                client.on('authenticated', async (data) => {
                                    logger_all.info(" [Client is Log in] : " + JSON.stringify(data));

                                });

                                client.on('ready', async (data) => {
                                    logger_all.info(" [Client is ready] : " + client.options.authStrategy.clientId);
                                    remove_participant()
                                });

                                setTimeout(async function () {
                                    if (function_call == false) {

                                        const update_inactive = `UPDATE senderid_master SET senderid_master_status = 'X' WHERE mobile_no = '${sender_id}' AND senderid_master_status != 'D'`
                                        logger_all.info(" [update query request] : " + update_inactive)
                                        const update_inactive_result = await db.query(update_inactive);
                                        logger_all.info(" [update query response] : " + JSON.stringify(update_inactive_result))

                                        const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Sender ID unlinked' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                        logger_all.info("[update query request] : " + update_api_log);
                                        const update_api_log_result = await db.query(update_api_log);
                                        logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                        response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Sender ID unlinked.', }
                                        logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                        logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                        return res.json(response_json)
                                    }
                                }, waiting_time);
                            } catch (err) {
                                logger_all.info(err)

                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                                return res.json(response_json)
                            }
                        }
                        else {
                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))

                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))

                            return res.json(response_json)
                        }
                    }
                }, waiting_time);


                async function remove_participant() {
                    function_call = true;
 logger_all.info("[API RESPONSE]  remove_participant Function calling")
                
                    client.getChats().then(async (chats) => {
                        try {
                
                            const myGroup = chats.find((chat) => chat.name === myGroupName);
                
                            const parti_count = myGroup.participants.length;
                            logger_all.info(JSON.stringify(myGroup));
                            if (!myGroup) {
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)
                
                                const update_group = `UPDATE group_master SET group_master_status = 'D' WHERE group_name = '${myGroupName}' AND group_master_status = 'Y'`
                                logger_all.info("[update query request] : " + update_group);
                                const update_group_result = await db.query(update_group);
                                logger_all.info("[update query response] : " + JSON.stringify(update_group_result))
                
                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Group not found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))
                
                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Group not found' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))
                
                                return res.json(response_json)
                
                            }
                            else if (parti_count > 1000) {
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)
                
                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Cannot add more than 1000 numbers to a group.' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))
                
                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Cannot add more than 1000 numbers to a group.' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))
                
                                return res.json(response_json)
                            }
                
                            await client.getContacts().then(async (contacts) => {
                                for (var i = 0; i < participants.length; i++) {
                                    // logger_all.info(JSON.stringify(contacts))
                
                                    const select_number = `SELECT con.campaign_name
                                    FROM group_contacts con 
                                    LEFT JOIN group_master grp ON grp.group_master_id = con.group_master_id
                                    WHERE con.mobile_no = '${participants[i]}' AND grp.group_name = '${myGroupName}'`
                                    logger_all.info("[select query request] : " + select_number);
                                    const select_number_result = await db.query(select_number);
                                    logger_all.info("[select query response] : " + JSON.stringify(select_number_result))
                
                                    if (select_number_result.length > 0) {
                                        logger_all.info(" - " + participants[i])
                                        const contactToRemove = contacts.find(
                                            (contact) => contact.number === `${participants[i]}`
                                        );
                
                                        if (contactToRemove) {
                
                                            logger_all.info("Contact Found!!!");
                
                                            const sanitized_number = participants[i].toString().replace(/[- )(]/g, ""); // remove unnecessary chars from the number
                                            const final_number = `${sanitized_number.substring(sanitized_number.length - 10)}`; // add 91 before the number here 91 is country code of India
                
                                            const number_details = await client.getNumberId(final_number); // get mobile number details
                
                                            if (number_details) {
                                                contact_id.push(contactToRemove.id._serialized);
                                                participants_number.push(participants[i]);
                                                response_msg.push("Success");
                                            }
                                            else {
                                                logger_all.info('Not in whatsapp!!!');
                                                response_msg.push("Mobile number not in whatsapp");
                                            }
                                        } else {
                                            logger_all.info('Not found!!!');
                                            response_msg.push("Contact not found");
                                        }
                                    }
                                    else {
                                        response_msg.push("Mobile number Not in the group");
                                    }
                                }
                            });
                
                            if (contact_id.length == 0) {
                
                                await client.destroy();
                                logger_all.info(" Destroy client - " + sender_id)
                
                                const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'No contacts found' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                                logger_all.info("[update query request] : " + update_api_log);
                                const update_api_log_result = await db.query(update_api_log);
                                logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))
                
                                response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'No contacts found.' }
                                logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                                logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))
                
                                return res.json(response_json)
                            }
                
                            // var group_add = await myGroup.addParticipants(contact_id);
                            // logger_all.info(group_add);
                            // const participantIdToRemove = contactToRemove.id._serialized;
                            const groupRemoveResult = await myGroup.removeParticipants(contact_id);
                            logger_all.info(groupRemoveResult);
                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)
                
                            if (grp_id == 0) {
                                logger_all.info(" GROUP ID IS '0'"+ grp_id)
 const update_grp_count = `UPDATE group_master SET total_count = total_count-${participants.length},success_count= success_count-${participants.length} WHERE group_master_id = '${grp_id}' AND group_master_status = 'Y'`
                                 logger_all.info("[update query request] : " + update_grp_count);
                                 const update_grp_count_result = await db.query(update_grp_count);
                                 logger_all.info("[update query response] : " + JSON.stringify(update_grp_count_result))
                                // grp_id = insert_grp_result.insertId;
                            }
                
                            else {
                                logger_all.info(" GROUP ID IS "+ grp_id)
                                 const update_grp_count = `UPDATE group_master SET total_count = total_count-${participants.length},success_count= success_count-${participants.length} WHERE group_master_id = '${grp_id}' AND group_master_status = 'Y'`
                                 logger_all.info("[update query request] : " + update_grp_count);
                                 const update_grp_count_result = await db.query(update_grp_count);
                                 logger_all.info("[update query response] : " + JSON.stringify(update_grp_count_result))
                            }
                
                            for (var k = 0; k < participants.length; k++) {
                                var contact_status = participants_number.includes(`${participants[k]}`) ? 'Y' : 'F';
                                const update_remove_members = `UPDATE group_contacts SET group_contacts_status = 'R',remove_comments ='${remove_comments}' WHERE group_contacts_id = '${req.body.group_contacts_ids}' AND group_contacts_status = 'Y'`
                                 logger_all.info("[Update query request] : " + contact_status);
                                logger_all.info("[Update query request] : " + update_remove_members);
                                const update_remove_members_result = await db.query(update_remove_members);
                                logger_all.info("[Update query response] : " + JSON.stringify(update_remove_members_result))                
                            }
                
                            const update_api_log = `UPDATE api_log SET response_status = 'S',response_date = CURRENT_TIMESTAMP, response_comments = 'Success' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_result))
                
                            response_json = { request_id: req.body.request_id, response_code: 1, response_status: 200, response_msg: 'Success.', "success": contact_id.length, "failure": participants.length - contact_id.length }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))
                
                            return res.json(response_json)
                        }
                        catch (e) {
                            logger_all.info(e);
                
                            await client.destroy();
                            logger_all.info(" Destroy client - " + sender_id)
                
                            const update_api_log = `UPDATE api_log SET response_status = 'F',response_date = CURRENT_TIMESTAMP, response_comments = 'Error occurred' WHERE request_id = '${req.body.request_id}' AND response_status = 'N'`
                            logger_all.info("[update query request] : " + update_api_log);
                            const update_api_log_Result = await db.query(update_api_log);
                            logger_all.info("[update query response] : " + JSON.stringify(update_api_log_Result))
                
                            response_json = { request_id: req.body.request_id, response_code: 0, response_status: 201, response_msg: 'Error occurred.' }
                            logger.info("[API RESPONSE] " + JSON.stringify(response_json))
                            logger_all.info("[API RESPONSE] " + JSON.stringify(response_json))
                
                            return res.json(response_json)
                        }
                    })
                }


            }

        } catch (err) {
            console.error(`Error while getting data`, err.message);
            next(err);
        }
    }
);





module.exports = router;

